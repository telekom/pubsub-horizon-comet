# Copyright 2024 Deutsche Telekom IT GmbH
#
# SPDX-License-Identifier: Apache-2.0

spring:
  application:
    name: Horizon Comet

logging:
  level:
    root: ${LOG_LEVEL:INFO}
    de.telekom.horizon: ${HORIZON_LOG_LEVEL:INFO}

kubernetes:
  enabled: true
  #roverToken:
  #kubeConfigPath:
  informer:
    resyncperiod:
      # 10 minutes
      ms: 600000
    namespace: ${COMET_INFORMER_NAMESPACE:default}

comet:
  oidc:
    token-uri: ${IRIS_TOKEN_ENDPOINT:https://iris.example.com/auth/realms/<realm>/protocol/openid-connect/token}
    client-id: ${IRIS_CLIENT_ID:gateway}
    client-secret: ${IRIS_CLIENT_SECRET:default=supersecret}
    # hard code cron statement here to enable configuration (and disablement in integration tests)
    cronTokenFetch: "0 */4 * * * *"
  security:
    # Must be lower-case and comma-separated, can be regex
    headerPropagationBlacklist: ${COMET_HEADER_PROPAGATION_BLACKLIST:x-spacegate-token,authorization,content-length,host,accept.*,x-forwarded.*,cookie}
    retrieve-token-connect-timeout: ${COMET_RETRIEVE_TOKEN_CONNECT_TIMEOUT:5000}
    retrieve-token-read-timeout: ${COMET_RETRIEVE_TOKEN_READ_TIMEOUT:5000}
  callback:
    max-connections: ${COMET_MAX_CONNECTIONS:10}
    max-timeout: ${COMET_MAX_TIMEOUT:30000}
    max-retries: ${COMET_MAX_RETRIES:10}
    initial-backoff-interval-ms: ${COMET_INITIAL_BACKOFF_INTERVAL_MS:100}
    max-backoff-interval-ms: ${COMET_MAX_BACKOFF_INTERVAL_MS:60000}
    backoff-multiplier: ${COMET_BACKOFF_MULTIPLIER:2.0}
    successful-status-codes: ${COMET_SUCCESSFUL_STATUS_CODES:200,201,202,204}
    redelivery-status-codes: ${COMET_REDELIVERY_STATUS_CODES:401,429,502,503,504}
    redelivery-threadpool-size: ${COMET_REDELIVERY_THREADPOOL_SIZE:10}
    redelivery-queue-capacity: ${COMET_REDELIVERY_QUEUE_CAPACITY:2147483647}

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,heapdump,shutdown
  endpoint:
    health:
      show-details: always
    shutdown:
      enabled: true
  health:
    hazelcast:
      enabled: false
    mongo:
      enabled: false
  zipkin:
    tracing:
      endpoint: ${JAEGER_COLLECTOR_URL:http://jaeger.example.com:9411}
  tracing:
    sampling:
      probability: ${ZIPKIN_SAMPLER_PROBABILITY:1.0}
  metrics:
    distribution:
      percentiles-histogram:
        spring.kafka.listener.*: true
      maximum-expected-value:
        spring.kafka.listener.*: 60000
      minimum-expected-value:
        spring.kafka.listener.*: 1

horizon:
  cache:
    enabled: true
    kubernetesServiceDns: ${COMET_CACHE_SERVICE_DNS:horizon-quasar-discovery-headless.integration.svc.cluster.local}
    deDuplication:
      enabled: ${COMET_CACHE_DE_DUPLICATION_ENABLED:false}
      defaultCacheName: comet-deduplication
  kafka:
    bootstrapServers: ${COMET_KAFKA_BROKERS:kafka:9092}
    groupId: ${COMET_KAFKA_GROUP_ID:comet}
    partitionCount: ${COMET_KAFKA_PARTITION_COUNT:16}
    staticMembership: true
    sessionTimeoutMs: ${COMET_KAFKA_SESSION_TIMEOUT:90000}
    groupInstanceId: ${COMET_KAFKA_GROUP_INSTANCE_ID:comet-0}
    consumerThreadpoolSize: ${COMET_KAFKA_CONSUMER_THREADPOOL_SIZE:4096}
    consumerQueueCapacity: ${COMET_KAFKA_CONSUMER_QUEUE_CAPACITY:8192}
    maxPollRecords: ${COMET_KAFKA_MAX_POLL_RECORDS:500}
    lingerMs: ${COMET_KAFKA_LINGER_MS:5}
    acks: ${COMET_KAFKA_ACKS:1}
    compression:
      enabled: ${COMET_KAFKA_COMPRESSION_ENABLED:false}
      type: ${COMET_KAFKA_COMPRESSION_TYPE:none}
  mongo:
    enabled: ${COMET_MONGO_ENABLED:true}
    url: ${COMET_MONGO_URL:mongodb://root:root@localhost:27017}
    databases:
      configTimeDatabase: ${COMET_MONGO_CONFIG_DATABASE:horizon-config}
    collection: ${COMET_MONGO_COLLECTION:eventSubscriptions}

  tracing:
    name: horizon